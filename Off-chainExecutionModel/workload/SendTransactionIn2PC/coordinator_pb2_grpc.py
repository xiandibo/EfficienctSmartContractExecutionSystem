# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import coordinator_pb2 as coordinator__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CoordinatorStub(object):
    """2pc for smart contract interface
    rpc CallSmartContract(InputForSC) returns (ResultFromEVM); //coordinator call the main contract
    rpc CallSmartContractInFollower(InputForSC) returns (ResultFromEVM); // contract invoke contract
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendTransaction = channel.unary_unary(
                '/coordinator.Coordinator/SendTransaction',
                request_serializer=coordinator__pb2.Transaction.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CommitPhaseResponse = channel.unary_unary(
                '/coordinator.Coordinator/CommitPhaseResponse',
                request_serializer=coordinator__pb2.ACK.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.PreCommitPhaseResponse = channel.unary_unary(
                '/coordinator.Coordinator/PreCommitPhaseResponse',
                request_serializer=coordinator__pb2.ACK.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class CoordinatorServicer(object):
    """2pc for smart contract interface
    rpc CallSmartContract(InputForSC) returns (ResultFromEVM); //coordinator call the main contract
    rpc CallSmartContractInFollower(InputForSC) returns (ResultFromEVM); // contract invoke contract
    """

    def SendTransaction(self, request, context):
        """rpc SC2PCPropose(ProposeReqForSC) returns (ResponseFromFollower); //coordinator rise propose to follower
        rpc SC2PCCommit(CommitReqForSC) returns (ResponseFromFollower); //coordinatoe rise commit after propose phase
        client send Tx to coordinator, no response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitPhaseResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreCommitPhaseResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTransaction,
                    request_deserializer=coordinator__pb2.Transaction.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CommitPhaseResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitPhaseResponse,
                    request_deserializer=coordinator__pb2.ACK.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PreCommitPhaseResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.PreCommitPhaseResponse,
                    request_deserializer=coordinator__pb2.ACK.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coordinator.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """2pc for smart contract interface
    rpc CallSmartContract(InputForSC) returns (ResultFromEVM); //coordinator call the main contract
    rpc CallSmartContractInFollower(InputForSC) returns (ResultFromEVM); // contract invoke contract
    """

    @staticmethod
    def SendTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coordinator.Coordinator/SendTransaction',
            coordinator__pb2.Transaction.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitPhaseResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coordinator.Coordinator/CommitPhaseResponse',
            coordinator__pb2.ACK.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreCommitPhaseResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coordinator.Coordinator/PreCommitPhaseResponse',
            coordinator__pb2.ACK.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
