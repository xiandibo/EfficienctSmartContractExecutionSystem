package main

import (
	"context"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/vadiminshakov/committer/peer"
	pb "github.com/vadiminshakov/committer/proto"
	"github.com/vadiminshakov/committer/trace"
)

const addr = "localhost:3000"


//启动客户端，向协调者发送提交查询请求
//客户端发送消息的入口
func main() {
	tracer, err := trace.Tracer("client", addr)
	if err != nil {
		panic(err)
	}
	//Client API For commit service 建立与addr的连接
	cli, err := peer.New(addr, tracer)
	if err != nil {
		panic(err)
	}

	//此系统不支持并发
	//go concurrentTest(cli)

	//远程调用Put API
	//resp, err := cli.Put(context.Background(), "key3", []byte("1111"))
	res, err := cli.CallSmartContract(
		context.Background(),
		&pb.InputForSC{
		Address: common.Hex2Bytes("684c903c66d69777377f0945052160c9f778d689"),
		Input: 		common.Hex2Bytes("da778c8a00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000bd770416a3345f91e4b34576cb804a576fa48eb100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000000"),
	})
	if err != nil {
		panic(err)
	}
	fmt.Println(res.Result)
	//if res.Type != pb.Type_ACK {
	//	panic("msg is not acknowledged")
	//}

	//resp, err = cli.Commit(context.Background(), &pb.CommitRequest{Index: 10})



	// read committed keys
	//key, err := cli.Get(context.Background(), "key3")
	//if err != nil {
	//	panic(err)
	//}
	//fmt.Println(string(key.Value))
}

func concurrentTest(cli *peer.CommitClient) (*pb.Response, error) {
	return cli.Put(context.Background(), "key3", []byte("444"))
}
