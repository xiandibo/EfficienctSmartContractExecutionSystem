package scexecution

import (
	"bufio"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/vadiminshakov/committer/addrtoip"
	"github.com/vadiminshakov/committer/core/state"
	"github.com/vadiminshakov/committer/core/vm"
	"os"
	"strconv"
)

//follower互相通信的逻辑，不包含组内共识


//硬编码合约地址

const (
	KVSTORE = "kvstore"
	KVTEST  = "kvtest"
	NumberOfInitContract = 100000
)

var (
	contractAddr = map[string][]common.Address{
		KVSTORE: {
			common.BytesToAddress([]byte("kvstore1")),
			common.BytesToAddress([]byte("kvstore2")),
			common.BytesToAddress([]byte("kvstore3")),
			common.BytesToAddress([]byte("kvstore4")),
			common.BytesToAddress([]byte("kvstore5")),
			common.BytesToAddress([]byte("kvstore6")),
			common.BytesToAddress([]byte("kvstore7")),
			common.BytesToAddress([]byte("kvstore8")),
			common.BytesToAddress([]byte("kvstore9")),
			common.BytesToAddress([]byte("kvstore10")),
		},
		KVTEST: {
			common.BytesToAddress([]byte("kvtest1")),
			common.BytesToAddress([]byte("kvtest2")),
			common.BytesToAddress([]byte("kvtest3")),
			common.BytesToAddress([]byte("kvtest4")),
			common.BytesToAddress([]byte("kvtest5")),
			common.BytesToAddress([]byte("kvtest6")),
			common.BytesToAddress([]byte("kvtest7")),
			common.BytesToAddress([]byte("kvtest8")),
			common.BytesToAddress([]byte("kvtest9")),
			common.BytesToAddress([]byte("kvtest10")),
		},
	}
)

// kvstore合约代码
// Deploy code， 不是 runtime code
// 需要使用deploy code来进行全局变量的初始化操作 （非必须？未测试）
//var kvstorecode = common.Hex2Bytes("608060405234801561001057600080fd5b5061077a806100206000396000f3fe608060405260043610610051576000357c010000000000000000000000000000000000000000000000000000000090048063693ec85e14610056578063e942b51614610197578063fe913865146102f6575b600080fd5b34801561006257600080fd5b5061011c6004803603602081101561007957600080fd5b810190808035906020019064010000000081111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111640100000000831117156100ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610331565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015c578082015181840152602081019050610141565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a357600080fd5b506102f4600480360360408110156101ba57600080fd5b81019080803590602001906401000000008111156101d757600080fd5b8201836020820111156101e957600080fd5b8035906020019184600183028401116401000000008311171561020b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561026e57600080fd5b82018360208201111561028057600080fd5b803590602001918460018302840111640100000000831117156102a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061043e565b005b34801561030257600080fd5b5061032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506104c2565b005b60606000826040518082805190602001908083835b60208310151561036b5780518252602082019150602081019050602083039250610346565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104325780601f1061040757610100808354040283529160200191610432565b820191906000526020600020905b81548152906001019060200180831161041557829003601f168201915b50505050509050919050565b806000836040518082805190602001908083835b6020831015156104775780518252602082019150602081019050602083039250610452565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906104bd9291906106a9565b505050565b6060816040519080825280602002602001820160405280156104f35781602001602082028038833980820191505090505b50905060008090505b815181101561053157808303828281518110151561051657fe5b906020019060200201818152505080806001019150506104fc565b506105428160006001845103610546565b5050565b600082905060008290508082141561055f5750506106a4565b600085600286860381151561057057fe5b05860181518110151561057f57fe5b9060200190602002015190505b8183131515610678575b8086848151811015156105a557fe5b9060200190602002015110156105c2578280600101935050610596565b5b85828151811015156105d157fe5b906020019060200201518110156105f0578180600190039250506105c3565b818313151561067357858281518110151561060757fe5b90602001906020020151868481518110151561061f57fe5b90602001906020020151878581518110151561063757fe5b906020019060200201888581518110151561064e57fe5b9060200190602002018281525082815250505082806001019350508180600190039250505b61058c565b8185121561068c5761068b868684610546565b5b838312156106a05761069f868486610546565b5b5050505b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106ea57805160ff1916838001178555610718565b82800160010185558215610718579182015b828111156107175782518255916020019190600101906106fc565b5b5090506107259190610729565b5090565b61074b91905b8082111561074757600081600090555060010161072f565b5090565b9056fea165627a7a72305820ed23cf4c34110dd1187b75c899b75096505cd00c00fb671c50a97b93d5f767bb0029")
//// kvtest合约代码
//var kvtestcode = common.Hex2Bytes("608060405234801561001057600080fd5b5061148e806100206000396000f3fe608060405260043610610046576000357c010000000000000000000000000000000000000000000000000000000090048063da778c8a1461004b578063fe91386514610074575b600080fd5b34801561005757600080fd5b50610072600480360361006d919081019061118e565b61009d565b005b34801561008057600080fd5b5061009b6004803603610096919081019061127d565b610dee565b005b6060600080600a9050876000015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e89602001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161010691906112dc565b600060405180830381600087803b15801561012057600080fd5b505af1158015610134573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061015d919081019061114d565b925061016881610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b51689602001518a606001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101c79291906112fe565b600060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b50505050876040015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e89606001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161025991906112dc565b600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506102b0919081019061114d565b92506102bb81610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b51689606001518a602001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161031a9291906112fe565b600060405180830381600087803b15801561033457600080fd5b505af1158015610348573d6000803e3d6000fd5b50505050866000015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e88602001516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103ac91906112dc565b600060405180830381600087803b1580156103c657600080fd5b505af11580156103da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610403919081019061114d565b925061040e81610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516886020015189606001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161046d9291906112fe565b600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b50505050866040015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e88606001516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104ff91906112dc565b600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610556919081019061114d565b925061056181610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516886060015189602001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105c09291906112fe565b600060405180830381600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b50505050856000015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e87602001516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161065291906112dc565b600060405180830381600087803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506106a9919081019061114d565b92506106b481610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516876020015188606001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107139291906112fe565b600060405180830381600087803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b50505050856040015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e87606001516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107a591906112dc565b600060405180830381600087803b1580156107bf57600080fd5b505af11580156107d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506107fc919081019061114d565b925061080781610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516876060015188602001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108669291906112fe565b600060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b50505050846000015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e86602001516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108f891906112dc565b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061094f919081019061114d565b925061095a81610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516866020015187606001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109b99291906112fe565b600060405180830381600087803b1580156109d357600080fd5b505af11580156109e7573d6000803e3d6000fd5b50505050846040015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e86606001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a4b91906112dc565b600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610aa2919081019061114d565b9250610aad81610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516866060015187602001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b0c9291906112fe565b600060405180830381600087803b158015610b2657600080fd5b505af1158015610b3a573d6000803e3d6000fd5b50505050836000015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e85602001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b9e91906112dc565b600060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610bf5919081019061114d565b9250610c0081610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516856020015186606001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c5f9291906112fe565b600060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b50505050836040015191508173ffffffffffffffffffffffffffffffffffffffff1663693ec85e85606001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cf191906112dc565b600060405180830381600087803b158015610d0b57600080fd5b505af1158015610d1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d48919081019061114d565b9250610d5381610dee565b8173ffffffffffffffffffffffffffffffffffffffff1663e942b516856060015186602001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610db29291906112fe565b600060405180830381600087803b158015610dcc57600080fd5b505af1158015610de0573d6000803e3d6000fd5b505050505050505050505050565b606081604051908082528060200260200182016040528015610e1f5781602001602082028038833980820191505090505b50905060008090505b8151811015610e5d578083038282815181101515610e4257fe5b90602001906020020181815250508080600101915050610e28565b50610e6e8160006001845103610e72565b5050565b6000829050600082905080821415610e8b575050610fd0565b6000856002868603811515610e9c57fe5b058601815181101515610eab57fe5b9060200190602002015190505b8183131515610fa4575b808684815181101515610ed157fe5b906020019060200201511015610eee578280600101935050610ec2565b5b8582815181101515610efd57fe5b90602001906020020151811015610f1c57818060019003925050610eef565b8183131515610f9f578582815181101515610f3357fe5b906020019060200201518684815181101515610f4b57fe5b906020019060200201518785815181101515610f6357fe5b9060200190602002018885815181101515610f7a57fe5b9060200190602002018281525082815250505082806001019350508180600190039250505b610eb8565b81851215610fb857610fb7868684610e72565b5b83831215610fcc57610fcb868486610e72565b5b5050505b505050565b6000610fe182356113e5565b905092915050565b600082601f8301121515610ffc57600080fd5b813561100f61100a82611362565b611335565b9150808252602083016020830185838301111561102b57600080fd5b611036838284611401565b50505092915050565b600082601f830112151561105257600080fd5b81516110656110608261138e565b611335565b9150808252602083016020830185838301111561108157600080fd5b61108c838284611410565b50505092915050565b6000608082840312156110a757600080fd5b6110b16080611335565b905060006110c184828501610fd5565b600083015250602082013567ffffffffffffffff8111156110e157600080fd5b6110ed84828501610fe9565b602083015250604061110184828501610fd5565b604083015250606082013567ffffffffffffffff81111561112157600080fd5b61112d84828501610fe9565b60608301525092915050565b600061114582356113f7565b905092915050565b60006020828403121561115f57600080fd5b600082015167ffffffffffffffff81111561117957600080fd5b6111858482850161103f565b91505092915050565b600080600080600060a086880312156111a657600080fd5b600086013567ffffffffffffffff8111156111c057600080fd5b6111cc88828901611095565b955050602086013567ffffffffffffffff8111156111e957600080fd5b6111f588828901611095565b945050604086013567ffffffffffffffff81111561121257600080fd5b61121e88828901611095565b935050606086013567ffffffffffffffff81111561123b57600080fd5b61124788828901611095565b925050608086013567ffffffffffffffff81111561126457600080fd5b61127088828901611095565b9150509295509295909350565b60006020828403121561128f57600080fd5b600061129d84828501611139565b91505092915050565b60006112b1826113ba565b8084526112c5816020860160208601611410565b6112ce81611443565b602085010191505092915050565b600060208201905081810360008301526112f681846112a6565b905092915050565b6000604082019050818103600083015261131881856112a6565b9050818103602083015261132c81846112a6565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561135857600080fd5b8060405250919050565b600067ffffffffffffffff82111561137957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156113a557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113f0826113c5565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561142e578082015181840152602081019050611413565b8381111561143d576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820e5e3f2437f6f60d844fcfdc15d8d7cd2e26d27b891e44ed1e652b4f7259fbdb76c6578706572696d656e74616cf50037")
var kvtestcode = common.Hex2Bytes("608060405234801561001057600080fd5b506107ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063da778c8a1461003b578063fe91386514610057575b600080fd5b610055600480360361005091908101906104f2565b610073565b005b610071600480360361006c91908101906105e1565b61020f565b005b6060600080601e9050876000015191508173ffffffffffffffffffffffffffffffffffffffff1663e942b51689602001518a606001516040518363ffffffff1660e01b81526004016100c6929190610643565b600060405180830381600087803b1580156100e057600080fd5b505af11580156100f4573d6000803e3d6000fd5b50505050876040015191508173ffffffffffffffffffffffffffffffffffffffff1663e942b51689606001518a602001516040518363ffffffff1660e01b8152600401610142929190610643565b600060405180830381600087803b15801561015c57600080fd5b505af1158015610170573d6000803e3d6000fd5b50505050866000015191508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886020015189606001516040518363ffffffff1660e01b81526004016101be929190610643565b600060405180830381600087803b1580156101d857600080fd5b505af11580156101ec573d6000803e3d6000fd5b505050508660400151915085600001519150856040015191505050505050505050565b6060816040519080825280602002602001820160405280156102405781602001602082028038833980820191505090505b50905060008090505b815181101561027a5780830382828151811061026157fe5b6020026020010181815250508080600101915050610249565b5061028b816000600184510361028f565b5050565b60008290506000829050808214156102a85750506103cb565b6000856002868603816102b757fe5b058601815181106102c457fe5b602002602001015190505b81831361039f575b808684815181106102e457fe5b602002602001015110156102ff5782806001019350506102d7565b5b85828151811061030c57fe5b602002602001015181101561032957818060019003925050610300565b81831361039a5785828151811061033c57fe5b602002602001015186848151811061035057fe5b602002602001015187858151811061036457fe5b6020026020010188858151811061037757fe5b602002602001018281525082815250505082806001019350508180600190039250505b6102cf565b818512156103b3576103b286868461028f565b5b838312156103c7576103c686848661028f565b5b5050505b505050565b6000813590506103df8161077e565b92915050565b600082601f8301126103f657600080fd5b8135610409610404826106a7565b61067a565b9150808252602083016020830185838301111561042557600080fd5b61043083828461072b565b50505092915050565b60006080828403121561044b57600080fd5b610455608061067a565b90506000610465848285016103d0565b600083015250602082013567ffffffffffffffff81111561048557600080fd5b610491848285016103e5565b60208301525060406104a5848285016103d0565b604083015250606082013567ffffffffffffffff8111156104c557600080fd5b6104d1848285016103e5565b60608301525092915050565b6000813590506104ec81610795565b92915050565b600080600080600060a0868803121561050a57600080fd5b600086013567ffffffffffffffff81111561052457600080fd5b61053088828901610439565b955050602086013567ffffffffffffffff81111561054d57600080fd5b61055988828901610439565b945050604086013567ffffffffffffffff81111561057657600080fd5b61058288828901610439565b935050606086013567ffffffffffffffff81111561059f57600080fd5b6105ab88828901610439565b925050608086013567ffffffffffffffff8111156105c857600080fd5b6105d488828901610439565b9150509295509295909350565b6000602082840312156105f357600080fd5b6000610601848285016104dd565b91505092915050565b6000610615826106d3565b61061f81856106de565b935061062f81856020860161073a565b6106388161076d565b840191505092915050565b6000604082019050818103600083015261065d818561060a565b90508181036020830152610671818461060a565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561069d57600080fd5b8060405250919050565b600067ffffffffffffffff8211156106be57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006106fa82610701565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561075857808201518184015260208101905061073d565b83811115610767576000848401525b50505050565b6000601f19601f8301169050919050565b610787816106ef565b811461079257600080fd5b50565b61079e81610721565b81146107a957600080fd5b5056fea365627a7a72315820c476e9fb96b9e06b66d0bf65d50185a4c1ce4fbd2d327bce76a54062ad0b4bfa6c6578706572696d656e74616cf564736f6c634300050f0040")
var kvstorecode = common.Hex2Bytes("608060405234801561001057600080fd5b50610528806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063693ec85e1461003b578063e942b5161461016f575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102c1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610134578082015181840152602081019050610119565b50505050905090810190601f1680156101615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102bf6004803603604081101561018557600080fd5b81019080803590602001906401000000008111156101a257600080fd5b8201836020820111156101b457600080fd5b803590602001918460018302840111640100000000831117156101d657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103cc565b005b60606000826040518082805190602001908083835b602083106102f957805182526020820191506020810190506020830392506102d6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103c05780601f10610395576101008083540402835291602001916103c0565b820191906000526020600020905b8154815290600101906020018083116103a357829003601f168201915b50505050509050919050565b806000836040518082805190602001908083835b6020831061040357805182526020820191506020810190506020830392506103e0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061044992919061044e565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061048f57805160ff19168380011785556104bd565b828001600101855582156104bd579182015b828111156104bc5782518255916020019190600101906104a1565b5b5090506104ca91906104ce565b5090565b6104f091905b808211156104ec5760008160009055506001016104d4565b5090565b9056fea265627a7a723158203ce82713a2d8484a9b837fab6b3b7abfa1ded2f5808fb17971939048b9d4755b64736f6c634300050f0032")

// 初始化给定的合约地址和代码
// 每个节点都初始化相同的合约地址和代码，我们再进行事先规定的映射
func Init(cfg *Config) {
	if cfg == nil {
		cfg = new(Config)
	}

	// 我们可以选择生成合约地址的方式
	// 1. 自定义地址	可以控制地址生成规律
	// 2. 按照以太坊生成合约地址的方式	比较方便

	/*for _, kvstoreaddr := range contractAddr[KVSTORE] {
		cfg.State.CreateAccount(kvstoreaddr)
		// set the receiver's (the executing contract) code for execution.
		cfg.State.SetCode(kvstoreaddr, kvstorecode)
		log.Println("Init kvstore contract: ", fmt.Sprintf("%x", kvstoreaddr), kvstoreaddr)
	}

	for _, kvtestaddr := range contractAddr[KVTEST] {
		cfg.State.CreateAccount(kvtestaddr)
		// set the receiver's (the executing contract) code for execution.
		cfg.State.SetCode(kvtestaddr, kvtestcode)
		log.Println("Init kvtest contract: ", fmt.Sprintf("%x", kvtestaddr), kvtestaddr)
	}*/

	// 使用默认地0x00000...地址 + nounce初始化合约
	// 把生成的地址分配到addrtoip包的AddressToIP map中
	// 如何把生成的地址放到python中
	//for i := 0; i < 10; i++ {
	//	_, addr, _, _ := Create(kvstorecode, cfg)
	//	//code, addr, leftovergas, err := Create(kvstorecode, cfg)
	//	//log.Println(code, addr, leftovergas, err)
	//	log.Println("Init kvstore contract: ", fmt.Sprintf("0x%x", addr), addr)
	//}
	//for i := 0; i < 10; i++ {
	//	_, addr, _, _ := Create(kvtestcode, cfg)
	//	//code, addr, leftovergas, err := Create(kvtestcode, cfg)
	//	//log.Println(code, addr, leftovergas, err)
	//	log.Println("Init kvtest contract: ", fmt.Sprintf("0x%x", addr), addr)
	//
	//}

	initKvtestContract(cfg) // 自定义初始化合约，地址保存到文件kvtest.txt
	initKvstoreContract(cfg) // 自定义初始化合约，地址保存到文件kvstore.txt


}

func initKvtestContract(cfg *Config) {
	// 合约地址写入文件
	filePath := "./kvtest.txt"
	err := os.Remove(filePath) // 先删除原文件
	if err != nil {
		fmt.Println("文件删除失败", err)
	}
	file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println("文件打开失败", err)
	}
	//及时关闭file句柄
	defer file.Close()
	write := bufio.NewWriter(file)

	// 尝试使用自定义生成合约地址方式
	for i := 0; i < NumberOfInitContract; i++ {
		str := "kvtest"
		str = str + strconv.Itoa(i)
		//fmt.Println(str)
		data := []byte(str)
		addr := common.BytesToAddress(crypto.Keccak256(data)[12:])
		//fmt.Println(data)
		hexForm := common.Bytes2Hex(addr.Bytes())
		//fmt.Println(hexForm)
		hexForm = "0x" + hexForm + "\n"
		write.WriteString(hexForm)
		err := SelfDefineCreate(kvtestcode, cfg, addr)

		if err != nil {
			fmt.Println(err)
		}

		addrtoip.AddressToIP[addr] = addrtoip.NodeList[(i % (len(addrtoip.NodeList)-1)) + 1]
	}

	write.Flush()
}

func initKvstoreContract(cfg *Config) {
	// 合约地址写入文件
	filePath := "./kvstore.txt"
	err := os.Remove(filePath) // 先删除原文件
	if err != nil {
		fmt.Println("文件删除失败", err)
	}
	file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println("文件打开失败", err)
	}
	//及时关闭file句柄
	defer file.Close()
	write := bufio.NewWriter(file)

	for i := 0; i < NumberOfInitContract; i++ {
		str := "kvstore"
		str = str + strconv.Itoa(i)
		//fmt.Println(str)
		data := []byte(str)
		addr := common.BytesToAddress(crypto.Keccak256(data)[12:])
		//fmt.Println(data)
		hexForm := common.Bytes2Hex(addr.Bytes()) // 不带 0x 前缀
		//fmt.Println(hexForm)
		hexForm = "0x" + hexForm + "\n"
		write.WriteString(hexForm)
		err := SelfDefineCreate(kvstorecode, cfg, addr)

		if err != nil {
			fmt.Println(err)
		}

		addrtoip.AddressToIP[addr] = addrtoip.NodeList[(i % (len(addrtoip.NodeList)-1)) + 1]
	}

	write.Flush()
}

// ExecuteTestContract 给定合约地址和输入参数，执行合约
func ExecuteTestContract(cfg *Config, input []byte, addr common.Address, txid uint64, statecopy *state.StateDB) ([]byte, *state.StateDB, error) {
	if cfg == nil {
		cfg = new(Config)
	}
	setDefaults(cfg) // 设定初始的设定参数

	// 如果没有初始化statedb，则初始化，但我们已经在main函数中初始化了statedb
	if cfg.State == nil {
		cfg.State, _ = state.New(common.Hash{}, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
	}

	var (
		//address = common.BytesToAddress([]byte("contract"))
		//vmenv   = NewEnv1(cfg, statecopy)
		vmenv   = NewEnv1(cfg, statecopy)
		sender  = vm.AccountRef(cfg.Origin)
	)
	vmenv.TxID = txid // 使得E能够在EVM中获取Tx的附带信息
	//vmenv.ChangeChainRule()
	//var a common.Address

	// Call the code with the given configuration.
	//log.Info("address", addr)
	//fmt.Println(addr)
	//log.Info("合约地址： ", addr)
	ret, _, err := vmenv.Call(
		sender,
		//common.BytesToAddress(contractAddr[KVTEST][0]),
		//contractAddr[KVTEST][0],
		//common.BytesToAddress(common.Hex2Bytes("684c903c66d69777377f0945052160c9f778d689")),
		addr,
		input,
		//cfg.GasLimit,
		99999999999,
		cfg.Value,
	)
	//log.Info("return", ret)
	//fmt.Println(gasl, vmenv.TxID)

	return ret, cfg.State, err
}


